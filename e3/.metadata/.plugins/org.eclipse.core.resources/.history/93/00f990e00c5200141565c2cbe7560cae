#include "cute.h"
#include "ide_listener.h"
#include "xml_listener.h"
#include "cute_runner.h"
#include "sevenseg.h"

void shouldPrintZero() {
	std::ostringstream out{};
	printLargeDigit(0, out);
	std::cout << out.str();
	ASSERT_EQUAL(" - \n| |\n   \n| |\n - \n", out.str());
}

void shouldPrintOne() {
	std::ostringstream out{};
	printLargeDigit(1, out);
	std::cout << out.str();
	ASSERT_EQUAL("   \n  |\n   \n  |\n   \n", out.str());
}

void shouldPrintTwo() {
	std::ostringstream out{};
	printLargeDigit(2, out);
	std::cout << out.str();
	ASSERT_EQUAL(" - \n  |\n - \n|  \n - \n", out.str());
}

void shouldPrintThree() {
	std::ostringstream out{};
	printLargeDigit(3, out);
	std::cout << out.str();
	ASSERT_EQUAL(" - \n  |\n - \n  |\n - \n", out.str());
}

void shouldPrintFour() {
	std::ostringstream out{};
	printLargeDigit(4, out);
	std::cout << out.str();
	ASSERT_EQUAL("   \n| |\n - \n  |\n   \n", out.str());
}

void shouldPrintFive() {
	std::ostringstream out{};
	printLargeDigit(5, out);
	std::cout << out.str();
	ASSERT_EQUAL(" - \n|  \n - \n  |\n   \n", out.str());
}

void runAllTests(int argc, char const *argv[]){
	cute::suite s;
	//TODO add your test here
	s.push_back(CUTE(shouldPrintZero));
	s.push_back(CUTE(shouldPrintOne));
	s.push_back(CUTE(shouldPrintTwo));
	cute::xml_file_opener xmlfile(argc,argv);
	cute::xml_listener<cute::ide_listener<> >  lis(xmlfile.out);
	cute::makeRunner(lis,argc,argv)(s, "AllTests");
}

int main(int argc, char const *argv[]){
    runAllTests(argc,argv);
    return 0;
}



